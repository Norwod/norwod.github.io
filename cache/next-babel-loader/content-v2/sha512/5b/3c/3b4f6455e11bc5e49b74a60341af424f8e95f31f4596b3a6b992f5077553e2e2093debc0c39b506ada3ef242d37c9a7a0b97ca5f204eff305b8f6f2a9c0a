{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { sberBox, sberPortal, mobile } from '@sberdevices/plasma-tokens/typo/index';\nimport { background, body1, gradient, text } from '@sberdevices/plasma-tokens';\nimport { darkSber } from '@sberdevices/plasma-tokens/themes/darkSber';\nimport { detectDevice, deviceScales, isSberBox } from '@sberdevices/plasma-ui/utils/deviceDetection';\nimport { useFocus } from '../hooks/useFocus';\nconst map = {\n  sberPortal,\n  sberBox,\n  mobile\n}; // создаем react-компонент c глобальными стилями типографики\n\nconst TypoScale = createGlobalStyle(map[detectDevice()]); // создаем react-компонент для подложки\n\nconst DocStyles = createGlobalStyle`\n    /* stylelint-disable-next-line selector-nested-pattern */\n    html {\n        color: ${text};\n        background-color: ${background};\n        background-image: ${gradient};\n        /** необходимо залить градиентом всю подложку */\n        min-height: 100vh;\n    }\n\n    /* stylelint-disable-next-line selector-nested-pattern */\n    body {\n        margin: 0;\n        ${!isSberBox() && '--plasma-colors-button-focused: transparent'};\n    }\n`; // создаем react-компонент для персонажа\n\nconst Theme = createGlobalStyle(darkSber);\nconst StyledLayout = styled.div`\n    padding: 0 0 ${({\n  noPadding\n}) => noPadding ? 0 : 80 * deviceScales[detectDevice()]}px;\n    ${body1}\n`;\nexport const GlobalStyles = () => __jsx(React.Fragment, null, __jsx(TypoScale, null), __jsx(DocStyles, null), __jsx(Theme, null));\nexport const Layout = (_ref) => {\n  let {\n    noPadding = false,\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"noPadding\", \"children\"]);\n\n  useFocus();\n  return __jsx(StyledLayout, _extends({\n    noPadding: noPadding\n  }, props), __jsx(GlobalStyles, null), children);\n};\nexport default Layout;","map":null,"metadata":{},"sourceType":"module"}